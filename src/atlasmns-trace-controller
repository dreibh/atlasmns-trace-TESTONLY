#!/usr/bin/python3
# -*- coding: utf-8 -*-
#
#  =================================================================
#           #     #                 #     #
#           ##    #   ####   #####  ##    #  ######   #####
#           # #   #  #    #  #    # # #   #  #          #
#           #  #  #  #    #  #    # #  #  #  #####      #
#           #   # #  #    #  #####  #   # #  #          #
#           #    ##  #    #  #   #  #    ##  #          #
#           #     #   ####   #    # #     #  ######     #
#
#        ---   The NorNet Testbed for Multi-Homed Systems  ---
#                        https://www.nntb.no
#  =================================================================
#
#  High-Performance Connectivity Tracer (HiPerConTracer)
#  Copyright (C) 2015-2019 by Thomas Dreibholz
#
#  This program is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#  Contact: dreibh@simula.no

import atexit
import datetime
import io
import ipaddress
import os
import re
import readline
import sys

import AtlasMNS
import AtlasMNSLogger


# ###### Add measurement run ################################################
def addMeasurementRun(atlasMNS, agentHostIP, agentTrafficClass, agentRouterIP, probeID):
   try:
      atlasMNS.scheduler_dbCursor.execute("""
         INSERT INTO ExperimentSchedule (AgentHostIP,AgentTrafficClass,AgentRouterIP,ProbeID)
         VALUES (%(AgentHostIP)s,%(AgentTrafficClass)s,%(AgentRouterIP)s,%(ProbeID)s)
         """, {
            'AgentHostIP':       str(agentHostIP),
            'AgentTrafficClass': int(agentTrafficClass),
            'AgentRouterIP':     str(agentRouterIP),
            'ProbeID':           int(probeID)
         })
      atlasMNS.scheduler_dbConnection.commit()
   except Exception as e:
      print('Unable to add measurement run: ' + str(e))
      atlasMNS.scheduler_dbConnection.rollback()


# ###### Remove measurement run #############################################
def removeMeasurementRun(atlasMNS, agentHostIP, agentTrafficClass, agentRouterIP, probeID):
   try:
      atlasMNS.scheduler_dbCursor.execute("""
         DELETE FROM ExperimentSchedule
         WHERE
            AgentHostIP = %(AgentHostIP)s AND
            AgentTrafficClass = %(AgentTrafficClass)s AND
            AgentRouterIP = %(AgentRouterIP)s AND
            ProbeID = %(ProbeID)s
         """, {
            'AgentHostIP':       str(agentHostIP),
            'AgentTrafficClass': int(agentTrafficClass),
            'AgentRouterIP':     str(agentRouterIP),
            'ProbeID':           int(probeID)
         })
      atlasMNS.scheduler_dbConnection.commit()
   except Exception as e:
      print('Unable to list measurement runs: ' + str(e))
      atlasMNS.scheduler_dbConnection.rollback()
      return


# ###### Check status of measurement run ####################################
def checkMeasurementRun(atlasMNS, agentHostIP, agentTrafficClass, agentRouterIP, probeID):
   try:
      atlasMNS.scheduler_dbCursor.execute("""
         SELECT * FROM ExperimentSchedule
         WHERE
            AgentHostIP = %(AgentHostIP)s AND
            AgentTrafficClass = %(AgentTrafficClass)s AND
            AgentRouterIP = %(AgentRouterIP)s AND
            ProbeID = %(ProbeID)s
         """, {
            'AgentHostIP':       str(agentHostIP),
            'AgentTrafficClass': int(agentTrafficClass),
            'AgentRouterIP':     str(agentRouterIP),
            'ProbeID':           int(probeID)
         })
      rows = atlasMNS.scheduler_dbCursor.fetchall()
   except Exception as e:
      print('Unable to list measurement runs: ' + str(e))
      atlasMNS.scheduler_dbConnection.rollback()
      return

   if len(rows) > 0:
      for row in rows:
         print(row)
   else:
      print('No experiment run found.')


# ###### List measurement runs ##############################################
def listMeasurementRuns(atlasMNS):
   try:
      atlasMNS.scheduler_dbCursor.execute("""
         SELECT * FROM ExperimentSchedule
         ORDER BY
            TimeStamp DESC,
            AgentHostIP ASC,
            AgentTrafficClass DESC,
            AgentRouterIP ASC,
            ProbeID ASC
         """)
      rows = atlasMNS.scheduler_dbCursor.fetchall()
   except Exception as e:
      print('Unable to list measurement runs: ' + str(e))
      atlasMNS.scheduler_dbConnection.rollback()
      return

   print('Measurements: ' + str(len(rows)))
   for row in rows:
      print('* ', row)



# ###### Main program #######################################################
if len(sys.argv) < 2:
   sys.stderr.write('Usage: ' + sys.argv[0] + ' configuration_file\n')
   sys.exit(1)


# ====== Initialise =========================================================
atlasMSNLogger = AtlasMNSLogger.AtlasMNSLogger(AtlasMNSLogger.TRACE)
atlasMNS = AtlasMNS.AtlasMNS()
if not atlasMNS.loadConfiguration(sys.argv[1]):
   sys.exit(1)

#if not atlasMNS.connectToRIPEAtlas():
   #sys.exit(1)

if not atlasMNS.connectToSchedulerDB():
   sys.exit(1)


# ====== Initialise GNU Readline for comfortable input ======================
histfile = os.path.join(os.path.expanduser("~"), ".atlasmns-trace-controller_history")
try:
   readline.read_history_file(histfile)
   readline.set_history_length(1000)
except FileNotFoundError:
   pass

atexit.register(readline.write_history_file, histfile)
readline.parse_and_bind('tab: complete')
readline.parse_and_bind('set editing-mode vi')


# ====== Main loop ==========================================================
AtlasMNSLogger.info('Controller is ready!')
while True:
    try:
       line = input('? ')
    except EOFError:
        break

    argv = re.split('\s+', line)
    if len(argv) > 0:

       if argv[0] == 'exit':
          break

       elif ((argv[0] == 'list') or (argv[0] == 'ls')):
          listMeasurementRuns(atlasMNS)

       elif ((argv[0] == 'add') or (argv[0] == 'remove') or (argv[0] == 'check')):
          if len(argv) >= 5:
             try:
                agentHostIP       = ipaddress.ip_address(argv[1])
                agentTrafficClass = int(argv[2])
                agentRouterIP     = ipaddress.ip_address(argv[3])
                probeID           = int(argv[4])
             except Exception as e:
                print('Bad parameter for ' + argv[0] + ' given: ' + str(e) + '!')

             if argv[0] == 'add':
                addMeasurementRun(atlasMNS, agentHostIP, agentTrafficClass, agentRouterIP, probeID)
             elif argv[0] == 'remove':
                removeMeasurementRun(atlasMNS, agentHostIP, agentTrafficClass, agentRouterIP, probeID)
             elif argv[0] == 'check':
                checkMeasurementRun(atlasMNS, agentHostIP, agentTrafficClass, agentRouterIP, probeID)
             else:
                raise ValueError('Unexpected command')

          else:
             print('Too few arguments for ' + argv[0] + ' given!')

       else:
          print('Unknown command: ' + argv[0])

print()


# ====== All done! ==========================================================
AtlasMNSLogger.info('Exiting!')
