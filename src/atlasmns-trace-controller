#!/usr/bin/python3
# -*- coding: utf-8 -*-
#
#  =================================================================
#           #     #                 #     #
#           ##    #   ####   #####  ##    #  ######   #####
#           # #   #  #    #  #    # # #   #  #          #
#           #  #  #  #    #  #    # #  #  #  #####      #
#           #   # #  #    #  #####  #   # #  #          #
#           #    ##  #    #  #   #  #    ##  #          #
#           #     #   ####   #    # #     #  ######     #
#
#        ---   The NorNet Testbed for Multi-Homed Systems  ---
#                        https://www.nntb.no
#  =================================================================
#
#  High-Performance Connectivity Tracer (HiPerConTracer)
#  Copyright (C) 2015-2019 by Thomas Dreibholz
#
#  This program is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#  Contact: dreibh@simula.no

import atexit
import readline
import datetime
import io
import os
import re
import sys

import AtlasMNS


# ###### Add measurement run ################################################
def addMeasurementRun(atlasMNS, address, dscp, router, probe_id):
   print()


# ###### Remove measurement run #############################################
def addMeasurementRun(atlasMNS, address, dscp, router, probe_id):
   print()


# ###### Check status of measurement run ####################################
def checkMeasurementRun(atlasMNS, address, dscp, router, probe_id):
   print()



# ###### Main program #######################################################
if len(sys.argv) < 2:
   sys.stderr.write('Usage: ' + sys.argv[0] + ' database_configuration\n')
   sys.exit(1)


# ====== Initialise =========================================================
atlasMNS = AtlasMNS.AtlasMNS()
if not atlasMNS.loadConfiguration(sys.argv[1]):
   sys.exit(1)

if not atlasMNS.connectToRIPEAtlas():
   sys.exit(1)

if not atlasMNS.connectToSchedulerDB():
   sys.exit(1)

# ------ Initialise GNU Readline for comfortable input ----------------------
histfile = os.path.join(os.path.expanduser("~"), ".atlasmns-trace-controller_history")
try:
   readline.read_history_file(histfile)
   readline.set_history_length(1000)
except FileNotFoundError:
   pass

atexit.register(readline.write_history_file, histfile)
readline.parse_and_bind('tab: complete')
readline.parse_and_bind('set editing-mode vi')


# ====== Main loop ==========================================================
log('Controller is ready!')
while True:
    try:
       line = input('? ')
    except EOFError:
        break
    if line == 'stop':
        break
    print('ENTERED: "%s"' % line)

print()


# ====== All done! ==========================================================
log('Exiting!')
