#!/usr/bin/python3
# -*- coding: utf-8 -*-
#
#  =================================================================
#           #     #                 #     #
#           ##    #   ####   #####  ##    #  ######   #####
#           # #   #  #    #  #    # # #   #  #          #
#           #  #  #  #    #  #    # #  #  #  #####      #
#           #   # #  #    #  #####  #   # #  #          #
#           #    ##  #    #  #   #  #    ##  #          #
#           #     #   ####   #    # #     #  ######     #
#
#        ---   The NorNet Testbed for Multi-Homed Systems  ---
#                        https://www.nntb.no
#  =================================================================
#
#  High-Performance Connectivity Tracer (HiPerConTracer)
#  Copyright (C) 2015-2019 by Thomas Dreibholz
#
#  This program is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#  Contact: dreibh@simula.no

import atexit
import bson.json_util
import datetime
import io
import ipaddress
import json
import os
import re
import readline
import sys

import AtlasMNS
import AtlasMNSLogger


# ###### Add measurement run ################################################
def addMeasurementRun(atlasMNS, agentHostIP, agentTrafficClass, agentFromIP, probeID):
   try:
      atlasMNS.scheduler_dbCursor.execute("""
         INSERT INTO ExperimentSchedule (AgentHostIP,AgentTrafficClass,AgentFromIP,ProbeID)
         VALUES (%(AgentHostIP)s,%(AgentTrafficClass)s,%(AgentFromIP)s,%(ProbeID)s)
         """, {
            'AgentHostIP':       str(agentHostIP),
            'AgentTrafficClass': int(agentTrafficClass),
            'AgentFromIP':       str(agentFromIP),
            'ProbeID':           int(probeID)
         })
      atlasMNS.scheduler_dbConnection.commit()
   except Exception as e:
      print('Unable to add measurement run: ' + str(e))
      atlasMNS.scheduler_dbConnection.rollback()


# ###### Remove measurement run #############################################
def removeMeasurementRun(atlasMNS, agentHostIP, agentTrafficClass, agentFromIP, probeID):
   try:
      atlasMNS.scheduler_dbCursor.execute("""
         DELETE FROM ExperimentSchedule
         WHERE
            AgentHostIP = %(AgentHostIP)s AND
            AgentTrafficClass = %(AgentTrafficClass)s AND
            AgentFromIP = %(AgentFromIP)s AND
            ProbeID = %(ProbeID)s
         """, {
            'AgentHostIP':       str(agentHostIP),
            'AgentTrafficClass': int(agentTrafficClass),
            'AgentFromIP':       str(agentFromIP),
            'ProbeID':           int(probeID)
         })
      atlasMNS.scheduler_dbConnection.commit()
   except Exception as e:
      print('Unable to list measurement runs: ' + str(e))
      atlasMNS.scheduler_dbConnection.rollback()
      return


# ###### Check status of measurement run ####################################
def checkMeasurementRun(atlasMNS, agentHostIP, agentTrafficClass, agentFromIP, probeID):
   try:
      atlasMNS.scheduler_dbCursor.execute("""
         SELECT * FROM ExperimentSchedule
         WHERE
            AgentHostIP = %(AgentHostIP)s AND
            AgentTrafficClass = %(AgentTrafficClass)s AND
            AgentFromIP = %(AgentFromIP)s AND
            ProbeID = %(ProbeID)s
         """, {
            'AgentHostIP':       str(agentHostIP),
            'AgentTrafficClass': int(agentTrafficClass),
            'AgentFromIP':       str(agentFromIP),
            'ProbeID':           int(probeID)
         })
      rows = atlasMNS.scheduler_dbCursor.fetchall()
   except Exception as e:
      print('Unable to list measurement runs: ' + str(e))
      atlasMNS.scheduler_dbConnection.rollback()
      return

   if len(rows) > 0:
      printMeasurementRuns(rows)
   else:
      print('No experiment run found.')


# ###### List measurement runs ##############################################
def addMeasurementRunsFromJSON(atlasMNS, jsonName):
   # ====== Parse JSON ======================================================
   try:
      jsonFile = open(jsonName, 'r')
   except Exception as e:
      print('Unable to open input file: ' + str(e))
      return False

   try:
      jsonData = json.load(jsonFile)
   except Exception as e:
      print('Unable to read JSON: ' + str(e))
      return False

   print(json.dumps(jsonData, indent=3, sort_keys=True))

   # ====== Create measurements from JSON ===================================
   for dryRun in [ True, False ]:
      for i in range(0, len(jsonData)):
         try:
            agentHostIP       = ipaddress.ip_address(jsonData[i]['agentHostIP'])
            agentTrafficClass = int(jsonData[i]['agentTrafficClass'])
            agentFromIP       = ipaddress.ip_address(jsonData[i]['agentFromIP'])
            probeID           = int(jsonData[i]['probeID'])

            if dryRun == False:
               print('=>', agentHostIP, agentTrafficClass, agentFromIP, probeID)
               addMeasurementRun(atlasMNS, agentHostIP, agentTrafficClass, agentFromIP, probeID)

         except Exception as e:
            print('Bad entry #' + str(i + 1) + ': ' + str(e))
            return False

   return True


# ###### Return string of value, or empty string for None type ##############
def valueOrNoneString(value):
   if value != None:
      return str(value)
   else:
      return ''


# ###### Print measurement runs #############################################
def printMeasurementRuns(rows, indent = '* '):
   sys.stdout.write(' ' * len(indent))
   sys.stdout.write('{0:>8s} {1:>8s} {2:>20s} {3:>20s} {4:>20s} {5:>2s} {6:>20s} {7:>16s} {8:>10s} {9:>6s} {10:>26s} {11:s}\n'.format(
      'ID', 'ProbeID', 'ProbeHostIP', 'ProbeFromIP', 'AgentHostIP', 'TC', 'AgentFromIP',
      'State', 'ProbeMsmID', 'Probeâ‚¡', 'AgentMsmTime', 'Info'
   ))
   for row in rows:
      # print(row)
      sys.stdout.write(indent)
      sys.stdout.write("{0:8d} {1:8s} {2:>20s} {3:>20s} {4:>20s} {5:02x} {6:>20s} {7:>16s} {8:10s} {9:6d} {10:>26s} {11:s}\n".format(
         row['Identifier'],
         valueOrNoneString(row['ProbeID']),
         valueOrNoneString(row['ProbeHostIP']),
         valueOrNoneString(row['ProbeFromIP']),
         valueOrNoneString(row['AgentHostIP']),
         row['AgentTrafficClass'],
         valueOrNoneString(row['AgentFromIP']),
         valueOrNoneString(row['State']),
         valueOrNoneString(row['ProbeMeasurementID']),
         row['ProbeCost'],
         valueOrNoneString(row['AgentMeasurementTime']),
         valueOrNoneString(row['Info']).strip()
      ))


# ###### List measurement runs ##############################################
def listMeasurementRuns(atlasMNS):
   rows = atlasMNS.querySchedule()
   print('Measurements: ' + str(len(rows)))
   printMeasurementRuns(rows)


# ###### Print agents #######################################################
def printAgents(rows, indent = '* '):
   sys.stdout.write(' ' * len(indent))
   sys.stdout.write('{0:>20s} {1:40s} {2:26s} {3:16s}\n'.format(
      'AgentHostIP', 'AgentHostName', 'LastSeen', 'Location'
   ))
   for row in rows:
      # print(row)
      sys.stdout.write(indent)
      sys.stdout.write("{0:>20s} {1:40s} {2:26s} {3:16s}\n".format(
         row['AgentHostIP'],
         row['AgentHostName'].strip(),
         str(row['LastSeen']),
         valueOrNoneString(row['Location'])
      ))


# ###### List measurement runs ##############################################
def listAgents(atlasMNS):
   rows = atlasMNS.queryAgents()
   print('Agents: ' + str(len(rows)))
   printAgents(rows)


# ###### Show results #######################################################
def showResults(atlasMNS, identifier):
   # ====== Find experiment =================================================
   experiments = atlasMNS.results_db['atlasmns'].find( { 'identifier': { '$eq': identifier }} )
   myExperiment = None
   for experiment in experiments:
      if myExperiment == None:
         myExperiment = experiment
      else:
         print('WARNING: Multiple experiments found! Something is wrong!')
         myExperiment = experiment
   if myExperiment == None:
      return False

   print('Summary for ID #' + str(identifier) + ':')
   print(bson.json_util.dumps(myExperiment, indent=3, sort_keys=True))

   myProbeMeasurementID   = myExperiment['probeMeasurementID']
   myAgentMeasurementTime = myExperiment['agentMeasurementTime']

   # ====== Find RIPE Atlas results =========================================
   print('RIPE Atlas Results for Measurement ID #' + str(myProbeMeasurementID) + ':')
   ripeAtlasResults = atlasMNS.results_db['ripeatlastraceroute'].find( { 'msm_id': { '$eq': myProbeMeasurementID }} )
   for ripeAtlasResult in ripeAtlasResults:
      print(' * ' + bson.json_util.dumps(ripeAtlasResult, indent=3, sort_keys=True))

   # ====== Find HiPerConTracer results =====================================
   print('HiPerConTracer Results for Measurement Time ' + str(myAgentMeasurementTime) + ':')
   hiPerConTracerResults = atlasMNS.results_db['traceroute'].find( { 'agentMeasurementTime': { '$eq': myAgentMeasurementTime }} )
   for hiPerConTracerResult in hiPerConTracerResults:
      print(' * ' + bson.json_util.dumps(hiPerConTracerResult, indent=3, sort_keys=True))


# ###### Show help ##########################################################
def showHelp():
   print('Commands Overview:')
   print('')
   print('Agent Information')
   print('* list-agents')
   print('')
   print('Measurement Scheduling')
   print('* add-measurement    agent_host_ip agent_traffic_class agent_from_ip probe_id')
   print('* check-measurement  agent_host_ip agent_traffic_class agent_from_ip probe_id')
   print('* remove-measurement agent_host_ip agent_traffic_class agent_from_ip probe_id')
   print('* add-measurements-from-json json_file')
   print('* list-measurements')
   print('* show-results identifier')
   print('')
   print('Miscellaneous')
   print('* exit')
   print('* help')
   print('')



# ###### Main program #######################################################
if len(sys.argv) < 2:
   sys.stderr.write('Usage: ' + sys.argv[0] + ' configuration_file\n')
   sys.exit(1)


# ====== Initialise =========================================================
atlasMNSLogger = AtlasMNSLogger.AtlasMNSLogger(AtlasMNSLogger.TRACE)
atlasMNS = AtlasMNS.AtlasMNS()
if not atlasMNS.loadConfiguration(sys.argv[1]):
   sys.exit(1)

if not atlasMNS.connectToSchedulerDB():
   sys.exit(1)

if not atlasMNS.connectToResultsDB():
   sys.exit(1)


# ====== Initialise GNU Readline for comfortable input ======================
histfile = os.path.join(os.path.expanduser("~"), ".atlasmns-trace-controller_history")
try:
   readline.read_history_file(histfile)
   readline.set_history_length(1000)
except FileNotFoundError:
   pass

atexit.register(readline.write_history_file, histfile)
readline.parse_and_bind('tab: complete')
readline.parse_and_bind('set editing-mode vi')


# ====== Main loop ==========================================================
AtlasMNSLogger.info('Controller is ready!')
while True:
    try:
       line = input('? ')
    except EOFError:
        break

    argv = re.split('\s+', line)
    if len(argv) > 0:

       if argv[0] == 'exit':
          break

       elif ((argv[0] == 'help') or (argv[0] == '?')):
          showHelp()

       elif argv[0] == 'show-results':
          if len(argv) >= 2:
             try:
                identifier = int(argv[1])
             except Exception as e:
                print('Bad parameter for ' + argv[0] + ' given: ' + str(e) + '!')

             showResults(atlasMNS, identifier)
          else:
             print('Too few arguments for ' + argv[0] + ' given!')

       elif argv[0] == 'list-measurements':
          listMeasurementRuns(atlasMNS)

       elif argv[0] == 'list-agents':
          listAgents(atlasMNS)

       elif ((argv[0] == 'add-measurement') or
             (argv[0] == 'remove-measurement') or
             (argv[0] == 'check-measurement')):
          if len(argv) >= 5:
             try:
                agentHostIP       = ipaddress.ip_address(argv[1])
                agentTrafficClass = int(argv[2])
                agentFromIP       = ipaddress.ip_address(argv[3])
                probeID           = int(argv[4])
             except Exception as e:
                print('Bad parameter for ' + argv[0] + ' given: ' + str(e) + '!')

             if argv[0] == 'add':
                addMeasurementRun(atlasMNS, agentHostIP, agentTrafficClass, agentFromIP, probeID)
             elif argv[0] == 'remove':
                removeMeasurementRun(atlasMNS, agentHostIP, agentTrafficClass, agentFromIP, probeID)
             elif argv[0] == 'check':
                checkMeasurementRun(atlasMNS, agentHostIP, agentTrafficClass, agentFromIP, probeID)
             else:
                raise ValueError('Unexpected command')

          else:
             print('Too few arguments for ' + argv[0] + ' given!')

       elif (argv[0] == 'add-add-measurements-from-json'):
          if len(argv) >= 2:
             addMeasurementRunsFromJSON(atlasMNS, argv[1])
          else:
             print('Too few arguments for ' + argv[0] + ' given!')

       else:
          print('Unknown command: ' + argv[0])

print()


# ====== All done! ==========================================================
AtlasMNSLogger.info('Exiting!')
