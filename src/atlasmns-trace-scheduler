#!/usr/bin/python3
# -*- coding: utf-8 -*-
#
#  =================================================================
#           #     #                 #     #
#           ##    #   ####   #####  ##    #  ######   #####
#           # #   #  #    #  #    # # #   #  #          #
#           #  #  #  #    #  #    # #  #  #  #####      #
#           #   # #  #    #  #####  #   # #  #          #
#           #    ##  #    #  #   #  #    ##  #          #
#           #     #   ####   #    # #     #  ######     #
#
#        ---   The NorNet Testbed for Multi-Homed Systems  ---
#                        https://www.nntb.no
#  =================================================================
#
#  High-Performance Connectivity Tracer (HiPerConTracer)
#  Copyright (C) 2015-2019 by Thomas Dreibholz
#
#  This program is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#  Contact: dreibh@simula.no

import collections
import configparser
import datetime
import io
import os
import psycopg2
import pymongo
import re
import shutil
import ssl
import socket
import sys


# ###### Print log message ##################################################
def log(logstring):
   print('\x1b[32m' + datetime.datetime.now().strftime('%Y-%m-%dT%H:%M:%S') + ': ' + logstring + '\x1b[0m');


# ###### Print warning message ##############################################
def warning(logstring):
   sys.stderr.write('\x1b[31m' + datetime.datetime.now().strftime('%Y-%m-%dT%H:%M:%S') + ': WARNING: ' + logstring + '\x1b[0m\n');


# ###### Abort with error ###################################################
def error(logstring):
   sys.stderr.write(datetime.datetime.now().isoformat() + \
                    ' ===== ERROR: ' + logstring + ' =====\n')
   sys.exit(1)



# ###### Main program #######################################################
if len(sys.argv) < 2:
   error('Usage: ' + sys.argv[0] + ' database_configuration')

configFileName = sys.argv[1]

scheduler_dbserver   = "localhost"
scheduler_dbport     = "5432"
scheduler_dbuser     = "scheduler"
scheduler_dbpassword = None
scheduler_database   = "atlasmnsdb"
scheduler_cafile     = "None"

results_dbserver     = "localhost"
results_dbport       = "27017"
results_dbuser       = "importer"
results_dbpassword   = None
results_database     = "atlasmnsdb"
results_cafile       = "None"


# ====== Get parameters =====================================================
parsedConfigFile = configparser.RawConfigParser()
parsedConfigFile.optionxform = str   # Make it case-sensitive!
try:
   parsedConfigFile.readfp(io.StringIO(u'[root]\n' + open(configFileName, 'r').read()))
except Exception as e:
    error('Unable to read database configuration file' +  sys.argv[1] + ': ' + str(e))
    sys.exit(1)

for parameterName in parsedConfigFile.options('root'):
   parameterValue = parsedConfigFile.get('root', parameterName)

   if parameterName == 'scheduler_dbserver':
      scheduler_dbserver = parameterValue
   elif parameterName == 'scheduler_dbport':
      scheduler_dbport = parameterValue
   elif parameterName == 'scheduler_dbuser':
      scheduler_dbuser = parameterValue
   elif parameterName == 'scheduler_dbpassword':
      scheduler_dbpassword = parameterValue
   elif parameterName == 'scheduler_database':
      scheduler_database = parameterValue
   elif parameterName == 'scheduler_cafile':
      scheduler_cafile = parameterValue

   elif parameterName == 'results_dbserver':
      results_dbserver = parameterValue
   elif parameterName == 'results_dbport':
      results_dbport = parameterValue
   elif parameterName == 'results_dbuser':
      results_dbuser = parameterValue
   elif parameterName == 'results_dbpassword':
      results_dbpassword = parameterValue
   elif parameterName == 'results_database':
      results_database = parameterValue
   elif parameterName == 'results_cafile':
      results_cafile = parameterValue


# ====== Connect to the scheduler database ==================================
log('Connecting to the PostgreSQL scheduler database at ' + scheduler_dbserver + ' ...')
try:
   if scheduler_cafile == "IGNORE":   # ------ Ignore TLS certificate -------
      warning('TLS certificate check for PostgreSQL scheduler database is turned off!')
      scheduler_dbConnection = psycopg2.connect(host=str(scheduler_dbserver), port=str(scheduler_dbport),
                                                user=str(scheduler_dbuser), password=str(scheduler_dbpassword),
                                                dbname=str(scheduler_database),
                                                sslmode='require')
   elif scheduler_cafile == "None":   # ------ Use default CA settings ------
      scheduler_dbConnection = psycopg2.connect(host=str(scheduler_dbserver), port=str(scheduler_dbport),
                                                user=str(scheduler_dbuser), password=str(scheduler_dbpassword),
                                                dbname=str(scheduler_database),
                                                sslmode='verify-ca')
   else:   # ------ Use given CA --------------------------------------------
      scheduler_dbConnection = psycopg2.connect(host=str(scheduler_dbserver), port=str(scheduler_dbport),
                                                user=str(scheduler_dbuser), password=str(scheduler_dbpassword),
                                                dbname=str(scheduler_database),
                                                sslmode='verify-ca', sslrootcert=scheduler_cafile)
   scheduler_dbConnection.autocommit = False
except Exception as e:
   log('Unable to connect to the PostgreSQL scheduler database at ' +
       scheduler_dbserver + ': ' + str(e))
   sys.exit(1)

scheduler_dbCursor = scheduler_dbConnection.cursor()


# ====== Connect to the results database ====================================
log('Connecting to MongoDB results database at ' + results_dbserver + ' ...')
try:
   if results_cafile == "IGNORE":   # ------ Ignore TLS certificate ------------
      warning('TLS certificate check for MongoDB results database is turned off!')
      results_dbConnection = pymongo.MongoClient(host=str(results_dbserver), port=int(results_dbport),
                                                 ssl=True, ssl_cert_reqs=ssl.CERT_NONE)
   elif results_cafile == "None":   # ------ Use default CA settings -----------
      results_dbConnection = pymongo.MongoClient(host=str(results_dbserver), port=int(results_dbport),
                                                 ssl=True, ssl_cert_reqs=ssl.CERT_REQUIRED)
   else:   # ------ Use given CA, requires PyMongo >= 3.4! ---------------
      results_dbConnection = pymongo.MongoClient(host=str(results_dbserver), port=int(results_dbport),
                                                 ssl=True, ssl_cert_reqs=ssl.CERT_REQUIRED, ssl_ca_certs=results_cafile)
   results_db = results_dbConnection[str(results_database)]
   results_db.authenticate(str(results_dbuser), str(results_dbpassword), mechanism='SCRAM-SHA-1')
except Exception as e:
   log('Unable to connect to the MongoDB results database at ' +
       results_dbserver + ': ' + str(e))
   sys.exit(1)



# ====== Main loop ==========================================================
log('Scheduler is ready!')



# ====== All done! ==========================================================
log('Exiting!')
