#!/usr/bin/python3
# -*- coding: utf-8 -*-
#
#  =================================================================
#           #     #                 #     #
#           ##    #   ####   #####  ##    #  ######   #####
#           # #   #  #    #  #    # # #   #  #          #
#           #  #  #  #    #  #    # #  #  #  #####      #
#           #   # #  #    #  #####  #   # #  #          #
#           #    ##  #    #  #   #  #    ##  #          #
#           #     #   ####   #    # #     #  ######     #
#
#        ---   The NorNet Testbed for Multi-Homed Systems  ---
#                        https://www.nntb.no
#  =================================================================
#
#  High-Performance Connectivity Tracer (HiPerConTracer)
#  Copyright (C) 2015-2019 by Thomas Dreibholz
#
#  This program is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#  Contact: dreibh@simula.no

import ipaddress
import os
import ripe.atlas.cousteau
import sys

import AtlasMNS
import AtlasMNSLogger


# ###### Schedule RIPE Atlas experiment #####################################
def scheduleRIPEAtlasExperiment(scheduledEntry):
   # ====== Create measurement ==============================================
   print('S')
   measurementID = 12345
   
   # ====== Update state ====================================================
   scheduledEntry['State']         = 'atlas_scheduled'
   scheduledEntry['MeasurementID'] = measurementID
   atlasMNS.updateScheduledEntry(scheduledEntry)


# ###### Check RIPE Atlas experiment ########################################
def checkRIPEAtlasExperiment(scheduledEntry):
   # ====== Check measurement status ========================================
   print('C')
   
   success = True
   probeHostIP   = ipaddress.IPv4Address('192.168.1.1')
   probeRouterIP = ipaddress.IPv4Address('1.2.3.4')
   
   
   # ====== Update state ====================================================
   if success == True:    
      scheduledEntry['State']         = 'agent_scheduled'
      scheduledEntry['ProbeHostIP']   = str(probeHostIP)
      scheduledEntry['ProbeRouterIP'] = str(probeRouterIP)
   else:
      scheduledEntry['State'] = 'failed'
   atlasMNS.updateScheduledEntry(scheduledEntry)


# ###### Finished experiment ################################################
def finished(scheduledEntry):
   # ====== Check agent status ==============================================
   print('DONE: ' + str(scheduledEntry))

   # ====== Update state ====================================================
   scheduledEntry['State'] = 'finished'
   atlasMNS.updateScheduledEntry(scheduledEntry)


# ###### Main program #######################################################
if len(sys.argv) < 2:
   sys.stderr.write('Usage: ' + sys.argv[0] + ' configuration_file\n')
   sys.exit(1)


# ====== Initialise =========================================================
atlasMNSLogger = AtlasMNSLogger.AtlasMNSLogger(AtlasMNSLogger.TRACE)
atlasMNS = AtlasMNS.AtlasMNS()
if not atlasMNS.loadConfiguration(sys.argv[1]):
   sys.exit(1)

#if not atlasMNS.connectToRIPEAtlas():
   #sys.exit(1)

if not atlasMNS.connectToSchedulerDB():
   sys.exit(1)

if not atlasMNS.connectToResultsDB():
   sys.exit(1)


# ====== Main loop ==========================================================
AtlasMNSLogger.info('Scheduler is ready!')

schedule = atlasMNS.querySchedule()
for scheduledEntry in schedule:
   print(scheduledEntry)

   # ------ State == 'scheduled' --------------------------------------------
   state = scheduledEntry['State']
   if state == 'scheduled':
      scheduleRIPEAtlasExperiment(scheduledEntry)

   # ------ State == 'atlas_scheduled' --------------------------------------
   elif state == 'atlas_scheduled':
      checkRIPEAtlasExperiment(scheduledEntry)

   # ------ State == 'agent_scheduled' --------------------------------------
   elif state == 'agent_scheduled':

      print("FIXME: TEST!")
      scheduledEntry['State'] = 'agent_completed'
      atlasMNS.updateScheduledEntry(scheduledEntry)

      # Nothing to do here!
      continue

   # ------ State == 'agent_completed' --------------------------------------
   elif state == 'agent_completed':
      finished(scheduledEntry)

   # ------ State == 'failed' -----------------------------------------------
   elif state == 'failed':
      # Nothing to do here!
      continue
      
   # ------ State == 'finished' ---------------------------------------------
   elif state == 'finished':
      # Nothing to do here!
      continue

   # ------ Bad State -------------------------------------------------------
   else:
      AtlasMNSLogger.error('Bad state for scheduled entry: ' + str(scheduledEntry))


# ====== All done! ==========================================================
AtlasMNSLogger.info('Exiting!')
